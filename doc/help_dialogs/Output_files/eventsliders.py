
import prettytable
import re
from PyQt5.QtWidgets import QApplication
def u(x):
    return str(x)
if True:  #here just to achieve the indent
    if True:
# ----- Cut below ---------------------------------------------

        # autogenerated help pasted below

        newline = "\n"  #@UnusedVariable
        helpstr = ""
        helpstr += "<head><style>"
        helpstr += "td, th {border: 1px solid #ddd;  padding: 6px;}"
        helpstr += "th {padding-top: 6px;padding-bottom: 6px;text-align: left;background-color: #0C6AA6; color: white;}"
        helpstr += "</style></head>"
        helpstr += "<body>"
        helpstr += "<b>" + u(QApplication.translate('HelpDlg','EVENT CUSTOM SLIDERS',None)) + "</b>"
        tbl_Sliders = prettytable.PrettyTable()
        tbl_Sliders.field_names = [u(QApplication.translate('HelpDlg','Command Type',None)),u(QApplication.translate('HelpDlg','Command',None))]
        tbl_Sliders.add_row([u(QApplication.translate('HelpDlg','Event',None)),u(QApplication.translate('HelpDlg','Hide or show the corresponding slider',None))])
        tbl_Sliders.add_row([u(QApplication.translate('HelpDlg','Action',None)),u(QApplication.translate('HelpDlg','Perform an action on the slider release',None))])
        helpstr += tbl_Sliders.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','Commands',None)) + "</b>"
        tbl_Commandstop = prettytable.PrettyTable()
        tbl_Commandstop.header = False
        tbl_Commandstop.add_row([u(QApplication.translate('HelpDlg',' Command depends on the action type ("{}" is replaced by value*factor + offset)',None))])
        helpstr += tbl_Commandstop.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        tbl_Commands = prettytable.PrettyTable()
        tbl_Commands.field_names = [u(QApplication.translate('HelpDlg','Command Type',None)),u(QApplication.translate('HelpDlg','Command',None))]
        tbl_Commands.add_row([u(QApplication.translate('HelpDlg','Serial',None)),u(QApplication.translate('HelpDlg','ASCII serial command or binary a2b_uu(serial command)',None))])
        tbl_Commands.add_row([u(QApplication.translate('HelpDlg','Modbus',None)),u(QApplication.translate('HelpDlg','write([slaveId,register,value],..,[slaveId,register,value]) \nwrite register: MODBUS function 6 (int) or function 16 (float)',None))])
        tbl_Commands.add_row(['&#160;',u(QApplication.translate('HelpDlg','wcoil(slaveId,register,<bool>) \nwrite coil: MODBUS function 5',None))])
        tbl_Commands.add_row(['&#160;',u(QApplication.translate('HelpDlg','wcoils(slaveId,register,[<bool>,..,<bool>]) \nwrite coils: MODBUS function 15',None))])
        tbl_Commands.add_row([u(QApplication.translate('HelpDlg',' ',None)),u(QApplication.translate('HelpDlg','mwrite(slaveId,register,andMask,orMask) \nmask write register: MODBUS function 22',None))])
        tbl_Commands.add_row(['&#160;',u(QApplication.translate('HelpDlg','writem(slaveId,register,value) or writem(slaveId,register,[<int>,..,<int>]) \nwrite registers: MODBUS function 16',None))])
        tbl_Commands.add_row(['&#160;',u(QApplication.translate('HelpDlg','writeBCD(slaveId,register,value) or writeBCD(slaveId,register,[<int>,..,<int>]) \nwrite BCD encoded int register: MODBUS function 16 (BCD)',None))])
        tbl_Commands.add_row(['&#160;',u(QApplication.translate('HelpDlg','writeWord(slaveId,register,value) \nwrite 32bit float to two 16bit int registers: MODBUS function 16',None))])
        tbl_Commands.add_row(['&#160;',u(QApplication.translate('HelpDlg','writes values to the registers in slaves specified by the given id',None))])
        tbl_Commands.add_row([u(QApplication.translate('HelpDlg','DTA',None)),u(QApplication.translate('HelpDlg','nsert Data address : value, ex. 4701:1000 and sv is 100. always multiply with 10 if value Unit: 0.1 / ex. 4719:0 stops heating',None))])
        helpstr += tbl_Commands.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        tbl_Commandsbottom = prettytable.PrettyTable()
        tbl_Commandsbottom.header = False
        tbl_Commandsbottom.add_row([u(QApplication.translate('HelpDlg','Offset added as offset to the slider value',None))+newline+u(QApplication.translate('HelpDlg','Factor multiplicator of the slider value',None))])
        helpstr += tbl_Commandsbottom.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "</body>"
        helpstr = re.sub(r"&amp;#160;", r"&#160;",helpstr)

        # autogenerated help pasted above

# ----- Cut above ---------------------------------------------
outfile = open('../output_files/eventsliders.html','w')
outfile.write(helpstr)
outfile.close()
outfile = open('../output_files/help.html','w')
outfile.write(helpstr)
outfile.close()

import prettytable
import re
from PyQt5.QtWidgets import QApplication
def u(x):
    return str(x)
if True:  #here just to achieve the indent
    if True:
# ----- Cut below ---------------------------------------------

        # autogenerated help pasted below

        newline = "\n"  #@UnusedVariable
        helpstr = ""
        helpstr += "<head><style>"
        helpstr += "td, th {border: 1px solid #ddd;  padding: 6px;}"
        helpstr += "th {padding-top: 6px;padding-bottom: 6px;text-align: left;background-color: #0C6AA6; color: white;}"
        helpstr += "</style></head>"
        helpstr += "<body>"
        helpstr += "<b>" + u(QApplication.translate('HelpDlg','SYMBOLIC VARIABLES',None)) + "</b>"
        tbl_SymbolicVariables = prettytable.PrettyTable()
        tbl_SymbolicVariables.field_names = [u(QApplication.translate('HelpDlg','Symbol',None)),u(QApplication.translate('HelpDlg','Description',None)),u(QApplication.translate('HelpDlg','Can  shift?\n(see below)',None))]
        tbl_SymbolicVariables.add_row(['t',u(QApplication.translate('HelpDlg','Absolute time (seconds) from begin of recording (not only the time after CHARGE!)',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['b',u(QApplication.translate('HelpDlg','Absolute time (seconds) from begin of recording of the background profile',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['x',u(QApplication.translate('HelpDlg','Current channel reading (not available in the Plotter)',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['Y1',u(QApplication.translate('HelpDlg','ET value',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['Y2',u(QApplication.translate('HelpDlg','BT value',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['Y3',u(QApplication.translate('HelpDlg','Extra #1 T1 value',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['Y4',u(QApplication.translate('HelpDlg','Extra #1 T2 value',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['Y5',u(QApplication.translate('HelpDlg','Extra #2 T1 value',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['Y6',u(QApplication.translate('HelpDlg','Extra #2 T2 value',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['...',u(QApplication.translate('HelpDlg','...and so forth',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['B1',u(QApplication.translate('HelpDlg','ET background',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['B2',u(QApplication.translate('HelpDlg','BT background',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['B3',u(QApplication.translate('HelpDlg','ExtraBackground #1-A',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['B4',u(QApplication.translate('HelpDlg','ExtraBackground #1-B',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['B5',u(QApplication.translate('HelpDlg','ExtraBackground #2-A',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['...',u(QApplication.translate('HelpDlg','...and so forth',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['T1',u(QApplication.translate('HelpDlg','ET tare value',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['T2',u(QApplication.translate('HelpDlg','BT tare value',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['T3',u(QApplication.translate('HelpDlg','Extra Device #1 channel 1 tare value',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['T4',u(QApplication.translate('HelpDlg','Extra Device #1 channel 2 tare value',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['T5',u(QApplication.translate('HelpDlg','Extra Device #2 channel 1 tare value',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['...',u(QApplication.translate('HelpDlg','...and so forth',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['E1',u(QApplication.translate('HelpDlg','Last event value of the first event type',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['E2',u(QApplication.translate('HelpDlg','Last event value of the second event type',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['E3',u(QApplication.translate('HelpDlg','Last event value of the third event type',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['E4',u(QApplication.translate('HelpDlg','Last event value of the fourth event type',None)),'&#160;'])
        tbl_SymbolicVariables.add_row(['&#160;','&#160;','&#160;'])
        tbl_SymbolicVariables.add_row(['R1',u(QApplication.translate('HelpDlg','ET rate of rise',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        tbl_SymbolicVariables.add_row(['R2',u(QApplication.translate('HelpDlg','BT rate of rise',None)),u(QApplication.translate('HelpDlg','Yes',None))])
        helpstr += tbl_SymbolicVariables.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','SHIFTED SYMBOLIC VARIABLES',None)) + "</b>"
        tbl_ShiftedSymbolicVariablestop = prettytable.PrettyTable()
        tbl_ShiftedSymbolicVariablestop.header = False
        tbl_ShiftedSymbolicVariablestop.add_row([u(QApplication.translate('HelpDlg','The symbolic variables t, b, Y<n>, B<n> and R<n> evaluate to the current value of a sequence of values that define a roast profile. To access earlier or later values one can apply a shift value.',None))+newline+u(QApplication.translate('HelpDlg','\nFor example, while "Y2" returns the current bean temperature (BT), "Y2[-1]" returns the previous BT temperature and "Y2[-2]" the one before that. Formulas used in the Plotter are applied in sequence to all values, thus there "Y2" points to the current BT temperature processed, "Y2[-1]" the previous BT temperature processed and "Y2[+1]" the next BT temperature to be processed. A positive shift is only available in the Plotter, obviously not during recording.',None))])
        helpstr += tbl_ShiftedSymbolicVariablestop.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        tbl_ShiftedSymbolicVariables = prettytable.PrettyTable()
        tbl_ShiftedSymbolicVariables.field_names = [u(QApplication.translate('HelpDlg','Example',None)),u(QApplication.translate('HelpDlg','Description',None))]
        tbl_ShiftedSymbolicVariables.add_row(['t[+1]',u(QApplication.translate('HelpDlg','Time one index ahead (plotter only)',None))])
        tbl_ShiftedSymbolicVariables.add_row(['t[-3]',u(QApplication.translate('HelpDlg','Time three indexes delayed',None))])
        tbl_ShiftedSymbolicVariables.add_row(['Y1[-2]',u(QApplication.translate('HelpDlg','ET value delayed by 2 indexes',None))])
        tbl_ShiftedSymbolicVariables.add_row(['Y2[+1]',u(QApplication.translate('HelpDlg','BT value index advanced by one index (plotter only)',None))])
        tbl_ShiftedSymbolicVariables.add_row(['B4[-6]',u(QApplication.translate('HelpDlg','ExtraBackground #1-B delayed 6 indexes',None))])
        tbl_ShiftedSymbolicVariables.add_row(['B5[+2]',u(QApplication.translate('HelpDlg','ExtraBackground #2-A advanced 2 indexes (plotter only)',None))])
        tbl_ShiftedSymbolicVariables.add_row(['R1[-2]',u(QApplication.translate('HelpDlg','ET rate of rise delayed two indexes',None))])
        helpstr += tbl_ShiftedSymbolicVariables.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','INDEXED SYMBOLIC VARIABLES',None)) + "</b>"
        tbl_IndexedSymbolic = prettytable.PrettyTable()
        tbl_IndexedSymbolic.field_names = [u(QApplication.translate('HelpDlg','Symbol',None)),u(QApplication.translate('HelpDlg','Description',None))]
        tbl_IndexedSymbolic.add_row([u(QApplication.translate('HelpDlg','t, b, Y<n>, B<n> and R<n>',None)),u(QApplication.translate('HelpDlg','Previously recorded data assigned to the symbolic variables t, b, Y<n>, B<n> and R<n> can also directly accessed by index. "Y2{0}" evaluates to the first recorded bean temperature (BT) and "Y2{CHARGE}" to the bean temperature at CHARGE. Additionally, the symbolic variable b can be used to access the recording time at a certain index of the background profile. Thus "b{CHARGE}" returns the recording time at CHARGE of the background profile.',None))])
        helpstr += tbl_IndexedSymbolic.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','AXIS MAPPING',None)) + "</b>"
        tbl_AxisMapping = prettytable.PrettyTable()
        tbl_AxisMapping.field_names = [u(QApplication.translate('HelpDlg','Symbol',None)),u(QApplication.translate('HelpDlg','Description',None))]
        tbl_AxisMapping.add_row(['k',u(QApplication.translate('HelpDlg','Scaling factor from time to RoR axis. The range of the temperature scale divided by the range of the delta scale. ',None))])
        tbl_AxisMapping.add_row(['o',u(QApplication.translate('HelpDlg','Offset from time to RoR axis. ',None))])
        helpstr += tbl_AxisMapping.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        tbl_AxisMappingbottom = prettytable.PrettyTable()
        tbl_AxisMappingbottom.header = False
        tbl_AxisMappingbottom.add_row([u(QApplication.translate('HelpDlg','Note: RoR values r can be scaled to the temperature axis using a linear approximation of the form "r*k + o". As the variables k and o depend on the actual axis settings which can be changed by the user without triggering a recomputation, those variable are less useful for use in a recording, but useful in the Plotter to plot w.r.t. the RoR x-axis instead of the temperature x-axis.',None))])
        helpstr += tbl_AxisMappingbottom.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','EVENT INDEX and TIME DELTA',None)) + "</b>"
        tbl_EventIndex = prettytable.PrettyTable()
        tbl_EventIndex.field_names = [u(QApplication.translate('HelpDlg','Symbol',None)),u(QApplication.translate('HelpDlg','Description',None))]
        tbl_EventIndex.add_row(['CHARGE, DRY, FCs, FCe, SCs, SCe, DROP',u(QApplication.translate('HelpDlg','Index of the corresponding event of the profile to retrieve time and values from the corresponding data structures. Evaluates to -1 if not set.',None))])
        tbl_EventIndex.add_row(['bCHARGE, bDRY, bFCs, bFCe, bSCs, bSCe, bDROP',u(QApplication.translate('HelpDlg','Index of the corresponding event of the background profile to retrieve time and values from the corresponding data structures. Evaluates to -1 if not set.',None))])
        tbl_EventIndex.add_row(['&#160;','&#160;'])
        tbl_EventIndex.add_row(['dCHARGE, dDRY, dFCs, dFCe, dSCs, dSCe, dDROP',u(QApplication.translate('HelpDlg','Time distance in seconds after the corresponding event. Thus dCHARGE is bound to the current roast time (after CHARGE) in seconds while t is bound to the time in seconds from the start of the recording.',None))])
        helpstr += tbl_EventIndex.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','AREA UNDER THE CURVE (AUC)',None)) + "</b>"
        tbl_AUC = prettytable.PrettyTable()
        tbl_AUC.field_names = [u(QApplication.translate('HelpDlg','Symbol',None)),u(QApplication.translate('HelpDlg','Description',None))]
        tbl_AUC.add_row(['AUCbase',u(QApplication.translate('HelpDlg','AUC base temperature (could be from the selected event, if set)',None))])
        tbl_AUC.add_row(['AUCtarget',u(QApplication.translate('HelpDlg','AUC target value (could be from the background profile, if set)',None))])
        tbl_AUC.add_row(['AUCvalue',u(QApplication.translate('HelpDlg','the current AUC value. -1 if none available.',None))])
        helpstr += tbl_AUC.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','PREDICITONS',None)) + "</b>"
        tbl_Predictions = prettytable.PrettyTable()
        tbl_Predictions.field_names = [u(QApplication.translate('HelpDlg','Symbol',None)),u(QApplication.translate('HelpDlg','Description',None))]
        tbl_Predictions.add_row(['pDRY',u(QApplication.translate('HelpDlg','Prediction of the time distance to the DRY event based on the current RoR. Evaluates to -1 on negative RoR and to 0 if the DRY event is already set.',None))])
        tbl_Predictions.add_row(['pFCS',u(QApplication.translate('HelpDlg','Same as pDRY, just for the FCs event.',None))])
        helpstr += tbl_Predictions.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        tbl_Predictionsbottom = prettytable.PrettyTable()
        tbl_Predictionsbottom.header = False
        tbl_Predictionsbottom.add_row([u(QApplication.translate('HelpDlg','Note: The same rules as for the corresponding PhasesLCDs apply to pDRY and pFCs:',None))+newline+u(QApplication.translate('HelpDlg','\nIf there is no background profile the DRY or FCs bean temperature used for the prediction is taken from the Config>Phases setup.',None))+newline+u(QApplication.translate('HelpDlg','\nIf there is a background profile and there is DRY or FCs event in the background profile, the DRY or FCs bean temperature used for the prediction is taken from the background profile.',None))+newline+u(QApplication.translate('HelpDlg','\nException to the above for DRY only: if AutoDRY is checked the DRY temperature used for the prediction is taken from the Config>Phases setup.  This does not apply to FCs and AutoFCS.',None))+newline+u(QApplication.translate('HelpDlg','\nThe prediction value is the calculated time in seconds to reach the DRY or FCs temperature.',None))])
        helpstr += tbl_Predictionsbottom.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','EXPRESSIONS',None)) + "</b>"
        tbl_Expressions = prettytable.PrettyTable()
        tbl_Expressions.field_names = [u(QApplication.translate('HelpDlg','Expression',None)),u(QApplication.translate('HelpDlg','Description',None))]
        tbl_Expressions.add_row(['(<true-expr> if <cond> else <false-expr>)',u(QApplication.translate('HelpDlg','Conditional. Evaluates to the value of the expression <true-expr> if the condition <cond> holds, otherwise to the value of the expression <false-expr>. The rules of Python are applied to decide if a value holds or not. Thus the boolean values "True" and "False" have the obvious semantic. Any number unequal to 0 evaluates to True and 0 evaluates to False. The value "None" is also evaluated to False.',None))])
        helpstr += tbl_Expressions.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','MATHEMATICAL FORMULAS',None)) + "</b>"
        tbl_MathFormulas = prettytable.PrettyTable()
        tbl_MathFormulas.field_names = [u(QApplication.translate('HelpDlg','Formula',None)),u(QApplication.translate('HelpDlg','Description',None))]
        tbl_MathFormulas.add_row(['abs(x)',u(QApplication.translate('HelpDlg','Return the absolute value of x.',None))])
        tbl_MathFormulas.add_row(['acos(x)',u(QApplication.translate('HelpDlg','Return the arc cosine (measured in radians) of x.',None))])
        tbl_MathFormulas.add_row(['asin(x)',u(QApplication.translate('HelpDlg','Return the arc sine (measured in radians) of x.',None))])
        tbl_MathFormulas.add_row(['atan(x)',u(QApplication.translate('HelpDlg','Return the arc tangent (measured in radians) of x.',None))])
        tbl_MathFormulas.add_row(['cos(x)',u(QApplication.translate('HelpDlg','Return the cosine of x (measured in radians).',None))])
        tbl_MathFormulas.add_row(['degrees(x)',u(QApplication.translate('HelpDlg','Convert angle x from radians to degrees.',None))])
        tbl_MathFormulas.add_row(['exp(x)',u(QApplication.translate('HelpDlg','Return e raised to the power of x.',None))])
        tbl_MathFormulas.add_row(['log(x[, base])',u(QApplication.translate('HelpDlg','Return the logarithm of x to the given base.',None))])
        tbl_MathFormulas.add_row(['min(x1,...,xn)',u(QApplication.translate('HelpDlg','Return the minimum of the given values.',None))])
        tbl_MathFormulas.add_row(['max(x1,...,xn)',u(QApplication.translate('HelpDlg','Return the maximum of the given values.',None))])
        tbl_MathFormulas.add_row(['pow(x, y)',u(QApplication.translate('HelpDlg','Return x**y (x to the power of y).',None))])
        tbl_MathFormulas.add_row(['radians(x)',u(QApplication.translate('HelpDlg','Convert angle x from degrees to radians.',None))])
        tbl_MathFormulas.add_row(['sin(x)',u(QApplication.translate('HelpDlg','Return the sine of x (measured in radians).',None))])
        tbl_MathFormulas.add_row(['sqrt(x)',u(QApplication.translate('HelpDlg','Return the square root of x.',None))])
        tbl_MathFormulas.add_row(['tan(x)',u(QApplication.translate('HelpDlg','Return the tangent of x (measured in radians).',None))])
        helpstr += tbl_MathFormulas.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','MATHEMATICAL CONSTANTS',None)) + "</b>"
        tbl_Constants = prettytable.PrettyTable()
        tbl_Constants.field_names = [u(QApplication.translate('HelpDlg','Symbol',None)),u(QApplication.translate('HelpDlg','Value',None))]
        tbl_Constants.add_row(['e',2.71828182845904])
        tbl_Constants.add_row(['pi',3.14159265358979])
        helpstr += tbl_Constants.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "<br/><br/><b>" + u(QApplication.translate('HelpDlg','PLOTTER EXTENSIONS',None)) + "</b>"
        tbl_PlotterExtensionstop = prettytable.PrettyTable()
        tbl_PlotterExtensionstop.header = False
        tbl_PlotterExtensionstop.add_row([u(QApplication.translate('HelpDlg','Note:  This section applies only to the Plotter\nUsing math formulas in the plotter also allows to use the symbolic variables P and F (see Signals, Symbolic Assignments and the Plotter).',None))])
        helpstr += tbl_PlotterExtensionstop.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        tbl_PlotterExtensions = prettytable.PrettyTable()
        tbl_PlotterExtensions.field_names = [u(QApplication.translate('HelpDlg','Symbol',None)),u(QApplication.translate('HelpDlg','Description',None))]
        tbl_PlotterExtensions.add_row(['P1...P9',u(QApplication.translate('HelpDlg','The variables P1,..,P9 represent the results from plot #1,..,#9. You can perform calculations in a later plot on variables of an earlier plot. That way, the plot variables P1,..,P9 allow the cascading or intermediate results. For example, plot #3 can refer to the results of plot 1 using the variable P1.',None))])
        tbl_PlotterExtensions.add_row(['F1...F9',u(QApplication.translate('HelpDlg','F1 refers to the previous result of the actual formula to realize a feedback loop. This is useful in filter designs. Similarly, F2 refers to the second previous result etc.',None))])
        helpstr += tbl_PlotterExtensions.get_html_string(attributes={"width":"100%","border":"1","padding":"1","border-collapse":"collapse"})
        helpstr += "</body>"
        helpstr = re.sub(r"&amp;#160;", r"&#160;",helpstr)

        # autogenerated help pasted above

# ----- Cut above ---------------------------------------------
outfile = open('../output_files/symbolic.html','w')
outfile.write(helpstr)
outfile.close()
outfile = open('../output_files/help.html','w')
outfile.write(helpstr)
outfile.close()